@ngdoc overview
@name Templates
@description

翻译者:[@why520crazy](https://github.com/why520crazy)

Angular的模板是一个声明式的视图，它指定信息从模型，控制器变成用户在浏览器上可以看见的视图，
并且是一个静态的DOM，包含HTML，CSS以及一些引导Angular添加行为并且转换模板为动态视图的属性.

在Angular中有以下元素属性可以直接在模板中使用:

* {@link guide/directive Directive} — 一个可扩展已有DOM元素或者代表可重复使用的DOM组件，用扩展属性(或者元素)标记.
* {@link api/ng.$interpolate Markup} — 用双括弧 `{{ }}` 给元素绑定表达式.
* {@link filter Filter} — 格式化数据显示在界面上.
* {@link forms Form controls} — 验证用户输入.

注: 除了在模板中声明元素外, 你也可以在Javascript代码中访问这些元素.

下面的代码片段展示了一个简单的Angular模板，主要由带有指令({@link guide/directive directives})的HTML标准标签和双花括弧表达式（{@link expression expressions}）组成:

<pre>
<html ng-app>
 <!-- Body tag augmented with ngController directive  -->
 <body ng-controller="MyController">
   <input ng-model="foo" value="bar">
   <!-- Button tag with ng-click directive, and
          string expression 'buttonText'
          wrapped in "{{ }}" markup -->
   <button ng-click="changeFoo()">{{buttonText}}</button>
   <script src="angular.js">
 </body>
</html>
</pre>

在一个简单的单页程序中，模板包含HTML，CSS和Angular指令，通常只是一个HTML文件(如 `index.html`)，
在一个更复杂的程序中，你可以在一个主要的页面用"partials"展示多个视图，这些 "partials"都是独立的HTML文件，在主页面可以包含（ "include" ）
这些"partials"页面，通过路由 {@link api/ngRoute.$route $route} 和 {@link api/ngRoute.directive:ngView ngView}指令结合，
相关的示例代码参考 {@link tutorial/ angular 教程} 中的第七，八步骤。


## 相关主题

* {@link filter Angular Filters(过滤器)}
* {@link forms Angular Forms(表单)}

## 相关的 API

* {@link api/index API Reference(引用)}

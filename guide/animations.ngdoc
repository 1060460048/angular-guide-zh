@ngdoc overview
@name Developer Guide: Animations
@description


# Animations

AngularJS 1.2为部分常见的指令提供了动画钩子，比如 `ngRepeat`, `ngSwitch` 和 `ngView`, 而自定义指令则可以通过`$animate`service来实现。这些动画钩子在整个指令的生命周期以及触发的时候触发动画，会尝试执行 CSS Transition, CSS Keyframe Animation 或JavaScript callback Animation（取决于指令中设定的动画)。要使用动画可以按照AngularJS约定的命名设置CSS,或定义factory。

动画在不依赖注入{@link api/ngAnimate `ngAnimate`模块}的情况下，是不可用的。

下面便是一个 `ngShow` 和 `ngHide` 使用动画的一个简单例子:

<example animations="true">
  <file name="index.html">
    <div ng-init="checked=true">
      <label>
        <input type="checkbox" ng-model="checked" style="float:left; margin-right:10px;"> Is Visible...
      </label>
      <div class="check-element animate-show-hide" ng-show="checked" style="clear:both;">
        Visible...
      </div>
    </div>
  </file>
  <file name="animations.css">
    .animate-show-hide {
      padding:10px;
      border:1px solid black;
      background:white;
    }

    .animate-show-hide.ng-hide-add, .animate-show-hide.ng-hide-remove {
      -webkit-transition:all linear 0.5s;
      -moz-transition:all linear 0.5s;
      -o-transition:all linear 0.5s;
      transition:all linear 0.5s;
      display:block!important;
    }

    .animate-show-hide.ng-hide-add.ng-hide-add-active,
    .animate-show-hide.ng-hide-remove {
      opacity:0;
    }

    .animate-show-hide.ng-hide-add,
    .animate-show-hide.ng-hide-remove.ng-hide-remove-active {
      opacity:1;
    }
  </file>
</example>

## 使用

可以看看{@link api/ngAnimate `ngAnimate` API文档 }有关使用该模块的说明


你或许还需要设置一个单独的样式文件用于定义CSS动画。

## 如何工作

AngularJS的动画是完全基于CSS的classes。只要在你网页中得HTML元素上加上特定的class，你就可以使用动画了。让我们看一个含有repeat的模板使用动画的例子:

<pre>
<div ng-repeat="item in items" class="repeated-item">
  {{ item.id }}
</div>
</pre>

正如你可以看到,`.repeated-item`class在repeat元素的上，这个class将是我们应用程序用于或者JavaScript动画代码告诉AngularJS来执行.

在每次ngRepeat新增一个item时, ngRepeat会在该元素上添加一个`ng-enter`类名，当移除元素时会添加`ng-leave`的类名，在位置发生移动时会添加`ng-move`的类名。

下面的CSS代码中, 我们可以看到每一个ngRepeat触发的事件,设置transition以及animation动画代码：

<pre>
&#47;&#42;
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
&#42;&#47;
.repeated-item.ng-enter, .repeated-item.ng-move {
  -webkit-transition:0.5s linear all;
  -moz-transition:0.5s linear all;
  -o-transition:0.5s linear all;
  transition:0.5s linear all;
  opacity:0;
}

&#47;&#42;
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
&#42;&#47;
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
  opacity:1;
}

&#47;&#42;
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
&#42;&#47;
.repeated-item.ng-leave {
  -webkit-animation:0.5s my_animation;
  -moz-animation:0.5s my_animation;
  -o-animation:0.5s my_animation;
  animation:0.5s my_animation;
}

&#64;keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

&#47;&#42;
  Unfortunately each browser vendor requires
  its own definition of keyframe animation code...
&#42;&#47;
&#64;-webkit-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

&#64;-moz-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

&#64;-o-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}
</pre>

同样的方法使用JavaScript也可以设置动画 (**用jQuery来执行动画**):

<pre>
myModule.animation('.repeated-item', function() {
  return {
    enter : function(element, done) {
      element.css('opacity',0);
      jQuery(element).animate({
        opacity: 1
      }, done);

      // optional onDone or onCancel callback
      // function to handle any post-animation
      // cleanup operations
      return function(isCancelled) {
        if(isCancelled) {
          jQuery(element).stop();
        }
      }
    },
    leave : function(element, done) {
      element.css('opacity', 1);
      jQuery(element).animate({
        opacity: 0
      }, done);

      // optional onDone or onCancel callback
      // function to handle any post-animation
      // cleanup operations
      return function(isCancelled) {
        if(isCancelled) {
          jQuery(element).stop();
        }
      }
    },
    move : function(element, done) {
      element.css('opacity', 0);
      jQuery(element).animate({
        opacity: 1
      }, done);

      // optional onDone or onCancel callback
      // function to handle any post-animation
      // cleanup operations
      return function(isCancelled) {
        if(isCancelled) {
          jQuery(element).stop();
        }
      }
    },

    // you can also capture these animation events
    addClass : function(element, className, done) {},
    removeClass : function(element, className, done) {}
  }
});
</pre>

按照这些生成的CSS类名，AngularJS自动执行CSS或JavaScript动画。 如果同时存在CSS与JavaScript的动画代码，并且匹配元素的类名，AngularJS则会同时执行。

## Class 与 ngClass 动画钩子
## Class and ngClass animation hooks

AngularJS 通过设置 **添加** and **删除** 的钩子来关注类名的变化。这意味着如果从一个元素中增加或者删除CSS类名，动画会在class添加或者删除之前执行。(需要注意：如果元素上有使用**表达式**或者**ng-class**,AngularJS也只能捕获到class的变化。)

下面的例子演示了如何在class的变化时进行动画：

<example animations="true">
 <file name="index.html">
  <p>
    <input type="button" value="set" ng-click="myCssVar='css-class'">
    <input type="button" value="clear" ng-click="myCssVar=''">
    <br>
    <span ng-class="myCssVar">CSS-Animated Text</span>
  </p>
 </file>
 <file name="style.css">
   .css-class-add, .css-class-remove {
     -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
     -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
     -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
     transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
   }

   .css-class,
   .css-class-add.css-class-add-active {
     color: red;
     font-size:3em;
   }

   .css-class-remove.css-class-remove-active {
     font-size:1.0em;
     color:black;
   }
 </file>
</example>

虽然CSS与我们之前看到的有一点不一样，但是想法是一样的。

## 那些directives支持动画呢？

部份AngularJS指令支持在它生命周期内有重要事件发生时候触发动画钩子，下面的表格详细说明了那些动画事件会被触发。

| Directive                                                                           | 支持动画                     |
|-------------------------------------------------------------------------------------|------------------------------------------|
| {@link api/ng.directive:ngRepeat#usage_animations ngRepeat}                               | enter , leave , move                   |
| {@link api/ngRoute.directive:ngView#usage_animations ngView}                              | enter , leave                          |
| {@link api/ng.directive:ngInclude#usage_animations ngInclude}                             | enter ,  leave                          |
| {@link api/ng.directive:ngSwitch#usage_animations ngSwitch}                               | enter ,  leave                          |
| {@link api/ng.directive:ngIf#usage_animations ngIf}                                       | enter ,  leave                          |
| {@link api/ng.directive:ngShow#usage_animations ngClass or &#123;&#123;class&#125;&#125;} | add , remove                           |
| {@link api/ng.directive:ngShow#usage_animations ngShow & ngHide}                          | add , remove (the ng-hide class value) |

对于每个动画事件所涉及的步骤，请参考{@link api/ngAnimate.$animate API 文档}。

## 怎么样我们自己的directive中使用动画呢？

自定义指令中也可以通过依赖注入 `$animate` , 并在你需要它的时候调用它。

<pre>
myModule.directive('my-directive', ['$animate', function($animate) {
  return function(element, scope, attrs) {
    element.bind('click', function() {
      if(element.hasClass('clicked')) {
        $animate.removeClass(element, 'clicked');
      } else {
        $animate.addClass(element, 'clicked');
      }
    });
  };
}]);
</pre>

## 更多关于动画

关于`$animate`每个方法的详细信息, 参考{@link api/ngAnimate.$animate API 文档}.

查看完整demo {@link tutorial/step_12 animation step within the AngularJS phonecat tutorial}.

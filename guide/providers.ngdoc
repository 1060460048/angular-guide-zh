@ngdoc overview
@name Developer Guide: Providers
@description
翻译者:[@lightma](https://github.com/lightma)

# Providers
你所构建的每个web应用都是由互相协作以达成特定目标的对象构成。为了让应用得以运行，这些对象还需要被实例化并连接在一起。在基于Angular框架的应用里，这些对象大都是通过{@link api/AUTO.$injector 注入服务}自动地实例化并连接在一起。

注入器创建两类对象，**服务**和**特定对象**。

服务是对象，而这些对象的API是由编写服务的开发人员所决定的。

特定对象遵循Angular框架特定的API。这些对象包括**控制器**，**指令**，**过滤器**或**动画**。

注入器需要知道如何去创建这些对象。你应该通过注册一种"配方"来告诉Angular如何创建你的对象。这里共有5种配方。

最冗长同时又最复杂的配方就是Provider配方，其余4种分别是——Value，Factory，Service和Constant，这4种都只是基于Provider之上的语法糖。

现在让我们看看通过不同配方来创建和使用服务的场景。首先我们从最简单的例子开始——在你代码的很多个地方都要使用一个相同的字符串，这个场景下，我们通过Value配方来完成服务的创建。

## 注意：关于模块。

为了使注入器知道如何创建这些对象，并让它们能连接在一起协同工作，我们需要一张关于"配方"的注册表。每个配方都有对象的标识以及如何创建该对象的说明。

每个配方都属于一个{@link api/angular.Module Angular模块}。一个Angular模块就像是装着一个或多个配方的袋子。通过人工跟踪记录模块依赖关系的事情不好玩，并且一个模块里也可能包含该模块同时依赖于其他模块的信息。

当基于Angular的应用从一个指定的应用模块启动时，Angular会创建一个注入器的实例，接着该实例就会创建一张关于“配方”的注册表，这张注册表是核心的"ng"模块，应用模块以及模块依赖的集合。当注入器需要为你的应用创建一个对象时，注入器就会查询这张注册表。

## Value 配方

假设我们要实现一个非常简单的服务叫做"clientId"，该服务提供一个代表远程API调用时会用到的鉴权id的字符串。

```javascript
var myApp = angular.module('myApp', []);
myApp.value('clientId', 'a12345654321x');
```
请注意我们是如何创建一个叫做"myApp"的Angular模块，并指定该模块定义包含构建`clientId`服务的配方的，在这个例子中`clientId`服务只是一个简单的字符串。

下面我们通过Angular的数据绑定来显示clientId：

```javascript
myApp.controller('DemoController', ['clientId', function DemoController(clientId) {
  this.clientId = clientId;
}]);
```

```html
<html ng-app="myApp">
  <body ng-controller="DemoController as demo">
    Client ID: {{demo.clientId}}
  </body>
</html>
```
在上面的例子中，当`DemoController`要求id为"clientId"的服务时，我们通过Value配方定义了需要传递的值。

好了，接下来，让我们来学习更复杂的例子！

## Factory 配方

虽然Value配方很容易编码，但缺少很多我们在创建服务时需要的重要特性。让我们看看与Value配方相比更为强大的兄弟——Factory。

Factory配方增加了以下能力：
* 使用其他服务的能力(即可以有依赖)
* 服务初始化
* 延迟/惰性初始化

Factory配方通过一个拥有0～n个参数(参数表示该服务对其他服务的依赖)的函数来创建服务，而函数返回值就是Factory配方创建的服务实例。

注意：Angular框架里所有的服务都是单实例对象。这意味着注入器仅使用一次配方来创建服务实例，然后注入器就会缓存这些服务实例的引用，以备将来使用。

既然我们说Factory是功能更强大的Value配方，那么你当然可以通过Factory配方来创建相同的服务。
针对我们前面举的`clientId`的Value配方例子，我们可以用Factory配方做如下重新实现：


```javascript
myApp.factory('clientId', function clientIdFactory() {
  return 'a12345654321x';
});
```

但是既然token只是一个字符串常量，我们还是坚持使用Value配方吧，这样使得代码更简洁明了。

但是，假如我们想创建一个在调用远程API时，用来计算并生成鉴权token的服务。这个token叫做'apiToken'，并且基于`clientId`的值和一个存储在浏览器本地存储的密码相计算的结果：


```javascript
myApp.factory('apiToken', ['clientId', function apiTokenFactory(clientId) {
  var encrypt = function(data1, data2) {
    // NSA-proof encryption algorithm:
    return (data1 + ':' + data2).toUpperCase();
  };

  var secret = window.localStorage.getItem('myApp.secret');
  var apiToken = encrypt(clientId, secret);

  return apiToken;
}]);
```

在上面的代码里，我们能看到`apiToken`服务是如何通过Factory配方定义的，并且该服务还依赖于`clientId`服务。这个工厂服务使用NSA-proof加密来生成鉴权token。

注意：将工厂方法命名为"<serviceId>Factory"是最佳实践（比如，apiTokenFactory）。虽然这种命名方式不是强制性的，但是它有助于浏览代码仓库或者在调试器里跟踪调用堆栈。

就像Value配方一样，Factory配方能创建任何类型的服务，不管是原生类型，对象常量，函数，甚至自定义类型的实例。

## Service 配方

Javascript开发人员经常使用自定义类型来编写面相对象的代码。现在，让我们一起探讨如何通过自定义类型——`unicornLauncher`服务，将独角兽发射到太空中去：

```javascript
function UnicornLauncher(apiToken) {

  this.launchedCount = 0;
  this.launch() {
    // make a request to the remote api and include the apiToken
    ...
    this.launchedCount++;
  }
}
```

现在我们准备发射独角兽，但我们注意到`UnicornLauncher`依赖于我们的`apiToken`.我们可以通过Factory配方来满足对`apiToken`的依赖：

```javascript
myApp.factory('unicornLauncher', ["apiToken", function(apiToken) {
  return new UnicornLauncher(apiToken);
}]);
```

然而，这个用例使用Service配方最合适。

Service配方实例化服务时，和Value和Factory配方类似，只是它通过*使用 `new` 操作符调用构造函数*来实现。构造函数可以接受0～n个参数，这些参数代表着该服务实例的依赖。

注意：Service配方遵循 {@link http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer "构造注入"} 的设计模式。

既然我们已经拥有了`UnicornLauncher`类型的构造函数，我们可以像下面代码那样使用Service配方来替代以上的Factory配方：

```javascript
myApp.service('unicornLauncher', ["apiToken", UnicornLauncher]);
```

是不是更简单了！

注意：是的，我们将一种服务配方命名为'Service'，我们对此感到后悔，并且知道我们将会以某种方式得到惩罚。就像我们把我们的后代之一命名为'Children'一样。孩子，这会惹恼老师的。（这段不知道是不是美式幽默:-D）


## Provider Recipe

There are two more recipe types left to cover. They are both fairly specialized and are used
infrequently. As already mentioned in the intro, the Provider recipe is the core recipe type and
all the other recipe types are just syntactic sugar on top of it. It is the most verbose recipe
with the most abilities, but for most services it's overkill.

Provider recipe is syntactically defined as a custom type that implements a `$get` method. This
method is a factory function just like the one we use in Factory recipe. In fact, if you define
a Factory recipe, an empty Provider type with the `$get` method set to your factory function is
automatically created under the hood.

You should use the Provider recipe only when you want to expose an API for application-wide
configuration that must be made before the application starts. This is usually interesting only
for reusable services whose behavior might need to vary slightly between applications.

Let's say that our `unicornLauncher` service is so awesome that many apps use it. By default the
launcher shoots unicorns into space without any protective shielding. But on some planets the
atmosphere is so thick that we must wrap every unicorn in tinfoil before sending it on its
intergalactic trip, otherwise they would burn while passing through the atmosphere. It would then
be great if we could configure the launcher to use the tinfoil shielding for each launch in apps
that need it. We can make it configurable it like so:


```javascript
myApp.provider('unicornLauncher', function UnicornLauncherProvider() {
  var useTinfoilShielding = false;

  this.useTinfoilShielding = function(value) {
    useTinfoilShielding = !!value;
  };

  this.$get = ["apiToken", function unicornLauncherFactory(apiToken) {

    // let's assume that the UnicornLauncher constructor was also changed to
    // accept and use the useTinfoilShielding argument
    return new UnicornLauncher(apiToken, useTinfoilShielding);
  }];
});
```

To turn the tinfoil shielding on in our app, we need to create a config function via the module
API and have the UnicornLauncherProvider injected into it:

```javascript
myApp.config(["unicornLauncherProvider", function(unicornLauncherProvider) {
  unicornLauncherProvider.useTinfoilShielding(true);
}]);
```

Notice that the unicorn provider is injected into the config function. This injection is done by a
provider injector which is different from the regular instance injector, in that it instantiates
and wires (injects) all provider instances only.

During application bootstrap, before Angular goes off creating all services, it configures and
instantiates all providers. We call this the configuration phase of the application life-cycle.
During this phase services aren't accessible because they haven't been created yet.

Once the configuration phase is over, interaction with providers is disallowed and the process of
creating services starts. We call this part of the application life-cycle the run phase.


## Constant Recipe

We've just learned how Angular splits the life-cycle into configuration phase and run phase and how
you can provide configuration to your application via the config function. Since the config
function runs in the configuration phase when no services are available, it doesn't have access
even to simple value objects created via Value recipe.

Since simple values, like url prefix, don't have dependencies or configuration, it is often handy
to make them available in both the configuration and run phases. This is what the Constant recipe
is for.

Let's say that our `unicornLauncher` service can stamp a unicorn with the planet name it's being
launched from if this name was provided during the configuration phase. The planet name is
application specific and is used also by various controllers during the runtime of the application.
We can then define the planet name as a constant like this:

```javascript
myApp.constant('planetName', 'Greasy Giant');
```

We could then configure the unicornLauncherProvider like this:

```javascript
myApp.config(['unicornLauncherProvider', 'planetName', function(unicornLauncherProvider, planetName) {
  unicornLauncherProvider.useTinfoilShielding(true);
  unicornLauncherProvider.stampText(planetName);
}]);
```

And since Constant recipe makes the value also available at runtime just like the Value recipe, we
can also use it in our controller and template:

```javascript
myApp.controller('DemoController', ["clientId", "planetName", function DemoController(clientId, planetName) {
  this.clientId = clientId;
  this.planetName = planetName;
}]);
```

```html
<html ng-app="myApp">
  <body ng-controller="DemoController as demo">
   Client ID: {{demo.clientId}}
   <br>
   Planet Name: {{demo.planetName}}
  </body>
</html>
```


## Special Purpose Objects

Earlier we mentioned that we also have special purpose objects that are different from services.
These objects extend the framework as plugins and therefore must implement interfaces specified by
Angular. These interfaces are Controller, Directive, Filter and Animation.

The instructions for the injector to create these special objects (with the exception of the
Controller objects) use the Factory recipe behind the scenes.

Let's take a look at how we would create a very simple component via the directive api that depends
on the `planetName` constant we've just defined and displays the planet name, in our case:
"Planet Name: Greasy Giant".

Since the directives are registered via Factory recipe, we can use the same syntax as with factories.

```javascript
myApp.directive('myPlanet', ['planetName', function myPlanetDirectiveFactory(planetName) {
  // directive definition object
  return {
    restrict: 'E',
    scope: {},
    link: function($scope, $element) { $element.text('Planet: ' + planetName); }
  }
}]);
```

We can then use the component like this:

```html
<html ng-app="myApp">
  <body>
   <my-planet></my-planet>
  </body>
</html>
```

Using Factory recipes you can also define Angular's filters and animations, but the controllers
are a bit special. You create a controller as a custom type that declares its dependencies as
arguments for its constructor function. This constructor is then registered with a module. Let's
take a look at the `DemoController`, created in one of the early examples:

```javascript
myApp.controller('DemoController', ['clientId', function DemoController(clientId) {
  this.clientId = clientId;
}]);
```

The DemoController is instantiated via its constructor every time the app needs an instance of
DemoController (in our simple app it's just once). So unlike services, controllers are not
singletons. The constructor is called with all the requested services, in our case the `clientId`
service.


## Conclusion

To wrap it up, let's summarize the most important points:

- The injector uses recipes to create two types of objects: services and special purpose objects
- There are five recipe types that define how to create objects: Value, Factory, Service, Provider
  and Constant.
- Factory and Service are the most commonly used recipes. The only difference between them is that
  Service recipe works better for objects of custom type, while Factory can produce JavaScript
  primitives and functions.
- The Provider recipe is the core recipe type and all the other ones are just syntactic sugar on it.
- Provider is the most complex recipe type. You don't need it unless you are building a reusable
  piece of code that needs global configuration.
- All special purpose objects except for Controller are defined via Factory recipes.

<table class="table table-bordered code-table">
<thead>
<tr>
  <th>Features / Recipe type</th>
  <th>Factory</th>
  <th>Service</th>
  <th>Value</th>
  <th>Constant</th>
  <th>Provider</th>
</tr>
</thead>
<tbody>
<tr>
  <td>can have dependencies</td>
  <td class="success">yes</td>
  <td class="success">yes</td>
  <td class="error">no</td>
  <td class="error">no</td>
  <td class="success">yes</td>
</tr>
<tr>
  <td>uses type friendly injection</td>
  <td class="error">no</td>
  <td class="success">yes</td>
  <td class="success">yes\*</td>
  <td class="success">yes\*</td>
  <td class="error">no</td>
</tr>
<tr>
  <td>object available in config phase</td>
  <td class="error">no</td>
  <td class="error">no</td>
  <td class="error">no</td>
  <td class="success">yes</td>
  <td class="success">yes\*\*</td>
</tr>
<tr>
  <td>can create functions/primitives</td>
  <td class="success">yes</td>
  <td class="error">no</td>
  <td class="success">yes</td>
  <td class="success">yes</td>
  <td class="success">yes</td>
</tr>
</tbody>
</table>

\* at the cost of eager initialization by using `new` operator directly

\*\* the service object is not available during the config phase, but the provider instance is
(see the `unicornLauncherProvider` example above).


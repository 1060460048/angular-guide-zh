@ngdoc overview
@name Developer Guide: Bootstrap
@description

Translated by [@GrahamLe](https://github.com/grahamle)

# 概述

这一章讲述 Angular 初始化过程以及必要的时候用户如何能够手动将 Angular 初始化。

## Angular `<script>` 标签

下面例子展示了推荐的在应用中使用 Angular 的自动初始化的代码路径设置。

<pre>
<!doctype html>
<html xmlns:ng="http://angularjs.org" ng-app>
  <body>
    ...
    <script src="angular.js">
  </body>
</html>
</pre>

  * 在HTML页面底部放置 `script` 标签。这样可以优化应用的加载时间，因为避免了HTML加载时被 `angular.js` 脚步的加载阻滞。你可以在在这里 {@link http://code.angularjs.org} 获取 Angular 的最新版本。注意，别再你的产品代码中连接这个 URL，因为这样会在你的网站中暴露一个安全问题。当然，在开发的时候连接是没有问题的。
    * 选择 `angular-[version].js` 这样一个可读的版本，用来作为开发和调试用
    * 选择 `angular-[version].min.js` 这样一个压缩版本，用来作为产品发布时用
  * 如果你想要你的应用自动启动 Angular 的话，那就把 `ng-app` 放在应用的根结点中，通常情况下是 `<html>` 标签中，像下面这样：

        <html ng-app>

  * 如果你的应用需要支持 IE7 ，那么加上 `id="ng-app"`

        <html ng-app id="ng-app">

  * 如果你要使用 `ng:` 这样的老风格的指令方式，那就在 `html` 中加入 `xml命名空间` ，这样也能让 IE 得瑟下。（译注：历史原因，你懂的，所以 `ng:` 这种方式现在已经不推荐了。

        <html xmlns:ng="http://angularjs.org">

## 自动初始化

<img class="pull-right" style="padding-left: 3em;" src="img/guide/concepts-startup.png">

Angular 在以下两种情况下自动初始化，一个是在 `DOMContentLoaded` 事件触发时，或者在 `angular.js` 脚本被执行的同时如果 `document.readyState` 被置为 `'complete'` 的话。初始化时，Angular 会去找 {@link api/ng.directive:ngApp `ng-app`} 这个指明应用开始所在的指令。如果 {@link api/ng.directive:ngApp `ng-app`} 指令被找到的话，Angular 会做以下几件事：

  * 加载 `ng-app` 指令所指定的 {@link guide/module 模块}
  * 创建应用所需的 {@link api/AUTO.$injector injector}
  * 以 {@link api/ng.directive:ngApp `ng-app`} 所在的节点为根节点，开始遍历并编译DOM树（`ng-app` 指出了应用的哪一部份开始时 Angular 去编译的）

<pre>
<!doctype html>
<html ng-app="optionalModuleName">
  <body>
    I can add: {{ 1+2 }}.
    <script src="angular.js"></script>
  </body>
</html>
</pre>

## 手动初始化

If you need to have more control over the initialization process, you can use a manual
bootstrapping method instead. Examples of when you'd need to do this include using script loaders
or the need to perform an operation before Angular compiles a page.

Here is an example of manually initializing Angular:

<pre>
<!doctype html>
<html xmlns:ng="http://angularjs.org">
  <body>
    Hello {{'World'}}!
    <script src="http://code.angularjs.org/angular.js"></script>
    <script>
       angular.element(document).ready(function() {
         angular.module('myApp', []);
         angular.bootstrap(document, ['myApp']);
       });
    </script>
  </body>
</html>
</pre>

Note that we have provided the name of our application module to be loaded into the injector as the second
parameter of the {@link api/angular.bootstrap} function. Notice that `angular.bootstrap` will not create modules 
on the fly. You must create any custom {@link guide/module modules} before you pass them as a parameter. 

This is the sequence that your code should follow:

  1. After the page and all of the code is loaded, find the root element of your AngularJS
  application, which is typically the root of the document.

  2. Call {@link api/angular.bootstrap} to {@link compiler compile} the element into an
  executable, bi-directionally bound application.

## 延迟启动

This feature enables tools like Batarang and test runners to
hook into angular's bootstrap process and sneak in more modules
into the DI registry which can replace or augment DI services for
the purpose of instrumentation or mocking out heavy dependencies.

If `window.name` contains prefix `NG_DEFER_BOOTSTRAP!` when
{@link api/angular.bootstrap} is called, the bootstrap process will be paused
until `angular.resumeBootstrap()` is called.

`angular.resumeBootstrap()` takes an optional array of modules that
should be added to the original list of modules that the app was
about to be bootstrapped with.
